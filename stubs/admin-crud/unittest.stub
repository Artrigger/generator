<?php

namespace Tests\Controllers\Admin;

use LaravelRocket\Foundation\Tests\TestCase;

class %%MODEL%%ControllerTest extends TestCase
{

    protected $useDatabase = true;

    public function testGetInstance()
    {
        /** @var  \App\Http\Controllers\Admin\%%MODEL%%Controller $controller */
        $controller = \App::make(\App\Http\Controllers\Admin\%%MODEL%%Controller::class);
        $this->assertNotNull($controller);
    }

    public function setUp()
    {
        parent::setUp();
        $authUser = factory(\App\Models\AdminUser::class)->create();
        $authUserRole = factory(\App\Models\AdminUserRole::class)->create([
            'admin_user_id' => $authUser->id,
            'role' => \App\Models\AdminUserRole::ROLE_SUPER_USER,
        ]);
        $this->be($authUser, 'admins');
    }

    public function testGetList()
    {
        $response = $this->action('GET', 'Admin\%%MODEL%%Controller@index');
        $this->assertResponseOk();
    }

    public function testCreateModel()
    {
        $this->action('GET', 'Admin\%%MODEL%%Controller@create');
        $this->assertResponseOk();
    }

    public function testStoreModel()
    {
        $%%model%% = factory(\App\Models\%%MODEL%%::class)->make();
        $this->action('POST', 'Admin\%%MODEL%%Controller@store', [
                '_token' => csrf_token(),
            ] + $%%model%%->toArray());
        $this->assertResponseStatus(302);
    }

    public function testEditModel()
    {
        $%%model%% = factory(\App\Models\%%MODEL%%::class)->create();
        $this->action('GET', 'Admin\%%MODEL%%Controller@show', [$%%model%%->id]);
        $this->assertResponseOk();
    }

    public function testUpdateModel()
    {
        $faker = \Faker\Factory::create();

        $%%model%% = factory(\App\Models\%%MODEL%%::class)->create();

        $testData = $faker->name;
        $id = $%%model%%->id;

        $%%model%%->%%test_column%% = $testData;

        $this->action('PUT', 'Admin\%%MODEL%%Controller@update', [$id], [
                '_token' => csrf_token(),
            ] + $%%model%%->toArray());
        $this->assertResponseStatus(302);

        $new%%MODEL%% = \App\Models\%%MODEL%%::find($id);
        $this->assertEquals($testData, $new%%MODEL%%->%%test_column%%);
    }

    public function testDeleteModel()
    {
        $%%model%% = factory(\App\Models\%%MODEL%%::class)->create();

        $id = $%%model%%->id;

        $this->action('DELETE', 'Admin\%%MODEL%%Controller@destroy', [$id], [
                '_token' => csrf_token(),
            ]);
        $this->assertResponseStatus(302);

        $check%%MODEL%% = \App\Models\%%MODEL%%::find($id);
        $this->assertNull($check%%MODEL%%);
    }

}
